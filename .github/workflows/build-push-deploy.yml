name: build-push-deploy

on:
  push:
    branches: [ master ]

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get short commit sha
        id: sha
        run: |
          echo "::set-output name=tag::$(echo ${GITHUB_SHA::7})"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cinetickets:${{steps.sha.outputs.tag}}, ${{ secrets.DOCKERHUB_USERNAME }}/cinetickets:latest

  deploy:
    runs-on: ubuntu-latest
    environment: cinetickets
    needs: build-push
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get short commit sha
        id: sha
        run: |
          echo "::set-output name=tag::$(echo ${GITHUB_SHA::7})"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition cinema-api --query taskDefinition > task-definition.json

      - name: Fill in the new image ID
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: cinetickets
          image: ${{ secrets.DOCKERHUB_USERNAME }}/cinetickets:${{steps.sha.outputs.tag}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: cinema-service
          cluster: cinema-ecs-dev-o81jt53c
          wait-for-service-stability: true

  migrate:
    runs-on: ubuntu-latest
    environment: cinetickets
    needs: build-push
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'

      - name: Setup migration tool
        run: go install github.com/pressly/goose/v3/cmd/goose@latest

      - name: Run migrations
        run: |
          cd db/migrations
          goose redshift "postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}" up
